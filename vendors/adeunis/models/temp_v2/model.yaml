# Commercial name of the model 
name: Temperature Sensor
# Functional description of the product. Maximum 500 characters. 
description: "Temperature Sensor. Ready-to-use radio transmitter measuring ambient temperature."
# Logo of the device
logo: adrf_temp.png
# Product name & Version
product:
    name: ADRF/TEMP
    version: 1
# ID(s) of the profile that defines the LoRaWAN characteristics of this model.
# id: as defined under /profiles.
# lorawanDeviceProfileID: as defined by LoRa Alliance in https://lora-alliance.org/wp-content/uploads/2020/10/LoRa_Alliance_Vendor_ID_for_QR_Code_02142022.pdf.
# The lorawanDeviceProfileID consists of 8 upper-case hexadecimal characters, 4 characters for VendorID + 4 characters for VendorProfileID. Please consider using single (') or double (") quotation.
deviceProfileIds:
    - id: ADRF/TempA.1.0.2_EU
    - id: adeunis_AS923_1.0.2revB_classA
 
# You may optionally customize any of the following settings to override the generic value set in LoRaWAN device profiles associated with your model. Leave empty if you want to keep the Device Profile settings. 
# Maximum device TX Conducted output power in dBm. 
maxTxPower:
# Minimum device TX Conducted output power in dBm. 
minTxPower:
# Maximum device TX Radiated output power in dBm.  
maxTxEIRP:
# Minimum device TX Radiated output power in dBm.  
minTxEIRP:
# Typical mobility profile of the device. Possible values are 'near_static' (also valid for static devices), 'walking_speed', 'vehicular_speed'  
# or 'random' (not known, changes over time). 
motionIndicator:
 
# Is your device certified by the LoRa Alliance? Possible values: true, false. 
LoRaWANCertified: 
# Always mandatory: `<vendorId>:<modelName>:<modelVersion>` (You should have only one per model)
# Format: `<8 characters max>:<16 characters max>:<digits only>`
modelId: adeunis:temp:2
# <vendorId>:<protocolName>:<protocolVersion> Needed for linking the model with a specific driver -> must be the same one used in driver.yaml in the corresponding model (You might have several ones)
protocolId:
    - adeunis:temp:2
    - adeunis:temp:3
# DataSheet URL (optional) 
specificationURL: https://adeunis.freshdesk.com/helpdesk/attachments/22059939941
# User Guide URL (optional) 
userGuideURL: 
# <sensor>:<unitId> Available sensors following Actility ontology: https://github.com/actility/device-catalog/blob/main/template/sample-vendor/drivers/ONTOLOGY.md
sensors:
# Driver examples
# A list of examples description that are compatible with this model
examples:
    adeunis:temp:2:
        - "uplink containing the information frame on product configuration 1"
        - "uplink containing the information frame on product configuration 2"
        - "uplink containing the information frame on product configuration 3"
        - "uplink containing the information frame on network configuration"
        - "uplink containing the keep alive frame"
        - "uplink containing the data frame"
        - "downlink message containing the product configuration request frame"
        - "downlink message containing the network configuration request frame"
        - "downlink message containing specific register value request frame"
        - "downlink message containing the frame for updating the value of a specific register"
    adeunis:temp:3:
        - "uplink containing the information frame on product configuration"
        - "uplink containing the information frame on network configuration"
        - "uplink containing the keep alive frame when one channel activated"
        - "uplink containing the keep alive frame when both channels activated"
        - "uplink containing the periodic data frame when one channel activated"
        - "uplink containing the periodic data frame when both channels activated"
        - "uplink containing the alarm frame when one channel activated"
        - "uplink containing the alarm frame when both channels activated"
        - "uplink containing the response frame of updating a register when the request status is success"
        - "uplink containing the response frame of updating a register when an error occurred"
        - "uplink containing the alert frame"
        - "downlink message containing the product configuration request frame"
        - "downlink message containing the network configuration request frame"
        - "downlink message containing reading piece of data request frame"
        - "downlink message containing the frame of specific register value request"
        - "downlink message containing the frame of updating the value specific registers"